Endianness is the order in which bytes are stored in memory. 
Big endian is where the most significant byte is stored first
Little endian is where the least significant byte is stored first

I use this program to solve for the endianness of 'vumch'

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char *find_little_endian(const char *word)
{
    size_t word_len = strlen(word);
    char *little_endian = (char *)malloc((2 * word_len + 1) * sizeof(char));

    for (size_t i = word_len; i-- > 0;)
    {
        snprintf(&little_endian[(word_len - 1 - i) * 2], 3, "%02X", (unsigned char)word[i]);
    }

    little_endian[2 * word_len] = '\0';
    return little_endian;
}

char *find_big_endian(const char *word)
{
    size_t length = strlen(word);
    char *big_endian = (char *)malloc((2 * length + 1) * sizeof(char));

    for (size_t i = 0; i < length; i++)
    {
        snprintf(&big_endian[i * 2], 3, "%02X", (unsigned char)word[i]);
    }

    big_endian[2 * length] = '\0';
    return big_endian;
}

int main() {
    char word[] = "vumch";
    char *little = find_little_endian(word);
    char *large = find_big_endian(word);
    
    printf("%s and %s", little, large);
}
